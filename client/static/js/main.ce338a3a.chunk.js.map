{"version":3,"sources":["Footer.js","Tracking.js","LootCard.js","LootService.js","Form.js","Jumbotron.js","About.js","Navbar.js","App.js","serviceWorker.js","index.js","Configuration.js"],"names":["Footer","react_default","a","createElement","className","shards_react_es","href","esm","eventLabel","to","React","Component","Event","category","action","label","ReactGA","event","LootCard","props","str","affixList","item","affixes","map","affix","key","id","name","description","itemType","charAt","toUpperCase","slice","LootService","Object","classCallCheck","this","baseUrl","_configuration","apiUrl","fetch","concat","then","response","json","options","hasPrefix","hasSuffix","randomAffixes","lootUrl","method","headers","Content-Type","body","JSON","stringify","GeneratorForm","_this","possibleConstructorReturn","getPrototypeOf","call","disableAffix","bind","assertThisInitialized","enableAffix","handleChange","lootService","resetForm","state","baseState","newState","setState","objectSpread","_this2","getLoot","stateUpdate","catch","console","error","_this3","createLoot","eventFacade","_this4","htmlFor","size","value","onChange","changeItemType","target","sm","lg","toggle","checked","open","inline","onClick","preventDefault","theme","src_LootCard","_this5","itemState","Jumbotron","react_fontawesome_index_es","icon","faDice","About","py","faTwitter","faGithub","faBlog","LootChestNavbar","toggleAbout","aboutOpen","About_About","type","expand","navbar","App","trackingID","configuration","googleAnalyticsCode","initialize","pageview","window","location","pathname","search","Navbar_LootChestNavbar","Jumbotron_Jumbotron","Form_GeneratorForm","Footer_Footer","Boolean","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.ce338a3a.chunk.js","sourcesContent":["import React from 'react';\n\nimport {\n    Container\n} from 'shards-react';\nimport {\n    OutboundLink\n} from 'react-ga';\n\nexport default class Footer extends React.Component {\n    render () {\n        return (\n            <footer className=\"text-muted\">\n                <Container>\n                    <p className=\"float-right\">\n                        <a href=\"#top\">Back to top</a>\n                    </p>\n                    <p>\n                        Loot Chest &copy;2019 <OutboundLink\n                            eventLabel=\"myBlog\"\n                            to=\"https://valthonis.net\">Duane Sibilly, II</OutboundLink>. Front-end built with <OutboundLink\n                            eventLabel=\"react\"\n                            to=\"https://reactjs.org\">React</OutboundLink> and <OutboundLink\n                            eventLabel=\"shards-react\"\n                            to=\"https://designrevision.com/downloads/shards-react/\">Shards</OutboundLink>.<br />\n                    <OutboundLink\n                        eventLabel=\"ageOfTerror\"\n                        to=\"https://scottsgameroom.com/tag/age-of-terror/\">Age of Terror</OutboundLink> content used with kind permission from <a href=\"https://twitter.com/scottboehmer\">Scott Boehmer</a>.</p>\n                </Container>\n            </footer>\n        );\n    }\n};\n","import ReactGA from 'react-ga';\n\nconst Event = (category, action, label) => {\n        ReactGA.event({\n            action,\n            category,\n            label\n        });\n    },\n    initializeGA = trackingID => {\n        ReactGA.initialize(trackingID);\n    },\n    pageView = () => {\n        ReactGA.pageview(window.location.pathname + window.location.search);\n    };\n\nexport {\n    Event,\n    initializeGA,\n    pageView\n};\n","import React from 'react';\nimport {\n    Card,\n    CardBody,\n    CardHeader,\n    CardSubtitle\n} from 'shards-react';\n\nconst capitalize = str => {\n                if (typeof str !== 'string') {\n                    return '';\n                }\n\n                return str.charAt(0).toUpperCase() + str.slice(1);\n            },\n    LootCard = (props) => {\n        const affixes = props.item.affixes,\n            affixList = affixes.map(affix => {\n                return <li key={affix.id}><strong>{affix.name}:</strong> {affix.description}</li>;\n            });\n\n        return (\n            <Card>\n                <CardHeader>{props.item.name}</CardHeader>\n                <CardBody>\n                    <CardSubtitle>Magic {capitalize(props.item.itemType)}</CardSubtitle>\n                    <ul>{affixList}</ul>\n                </CardBody>\n            </Card>\n        );\n    };\n\nexport default LootCard;\n","import _configuration from './Configuration';\n\nexport default class LootService {\n    constructor () {\n        this.baseUrl = _configuration.apiUrl;\n        this.item = {\n            affixes: [],\n            itemType: 'Item',\n            name: 'Placeholder Item'\n        };\n    }\n\n    async getLoot () {\n        this.item = await fetch(`${this.baseUrl}/loot`).then(response => response.json());\n\n        return this.item;\n    }\n\n    async createLoot (options) {\n        const {\n            hasPrefix,\n            hasSuffix,\n            itemType,\n            randomAffixes\n        } = options;\n\n        let lootUrl,\n            method;\n\n        if (randomAffixes) {\n            // Generate wholly random item of the given type!\n            switch (itemType) {\n                case 'amulet':\n                case 'armor':\n                case 'ring':\n                case 'shield':\n                case 'weapon':\n                    lootUrl = `${this.baseUrl}/loot/${itemType}`;\n                    method = 'GET';\n                    break;\n                default:\n                    lootUrl = `${this.baseUrl}/loot`;\n                    method = 'POST';\n            }\n\n            this.item = await fetch(lootUrl, {\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                method\n            }).then(response => response.json());\n        } else {\n            if (itemType === 'random') {\n                this.item = await fetch(`${this.baseUrl}/loot`, {\n                    body: JSON.stringify({\n                        hasPrefix,\n                        hasSuffix\n                    }),\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    method: 'POST'\n                }).then(response => response.json());\n            } else {\n                // Generate item to specifications\n                this.item = await fetch(`${this.baseUrl}/loot/${itemType}`, {\n                    body: JSON.stringify({\n                        hasPrefix,\n                        hasSuffix\n                    }),\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    method: 'POST'\n                }).then(response => response.json());\n            }\n        }\n\n        return this.item;\n    }\n};\n","import React from 'react';\n\nimport {\n    Button,\n    ButtonGroup,\n    ButtonToolbar,\n    Col,\n    Collapse,\n    Container,\n    Form,\n    FormCheckbox,\n    FormGroup,\n    FormRadio,\n    FormSelect,\n    Row\n} from 'shards-react';\nimport {\n    Event\n} from './Tracking';\n\nimport LootCard from './LootCard';\nimport LootService from './LootService';\n\nexport default class GeneratorForm extends React.Component {\n    changeItemType (itemType) {\n        const newState = {\n            itemType\n        };\n\n        this.setState(state => {\n            return {\n                ...state,\n                ...newState\n            };\n        });\n    }\n\n    componentDidMount() {\n        this.lootService.getLoot().then(item => {\n            const stateUpdate = {\n                item\n            };\n\n            this.setState(state => {\n                return {\n                    ...state,\n                    ...stateUpdate\n                };\n            });\n        }).catch(console.error);\n    }\n\n    constructor (props) {\n        super(props);\n\n        this.disableAffix = this.disableAffix.bind(this);\n        this.enableAffix = this.enableAffix.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.lootService = new LootService();\n        this.resetForm = this.resetForm.bind(this);\n\n        this.state = {\n            hasPrefix: true,\n            hasSuffix: false,\n            item: {\n                affixes: [],\n                itemType: 'Item',\n                name: 'Placeholder Item'\n            },\n            itemType: 'random',\n            randomAffixes: true\n        };\n\n        this.baseState = this.state;\n    }\n\n    createLoot () {\n        Event('LOOT', 'Loot item generated', 'LOOT_CHEST');\n        this.lootService.createLoot({\n            hasPrefix: this.state.hasPrefix,\n            hasSuffix: this.state.hasSuffix,\n            itemType: this.state.itemType,\n            randomAffixes: this.state.randomAffixes\n        }).then(item => {\n            const stateUpdate = {\n                item\n            };\n\n            this.setState(state => {\n                return {\n                    ...state,\n                    ...stateUpdate\n                };\n            });\n        }).catch(console.error);\n    }\n\n    disableAffix (affix) {\n        const newState = {};\n\n        newState[affix] = false;\n\n        this.setState(state => {\n            return {\n                ...state,\n                ...newState\n            };\n        });\n    }\n\n    enableAffix (affix) {\n        const newState = {};\n\n        newState[affix] = true;\n\n        this.setState(state => {\n            return {\n                ...state,\n                ...newState\n            };\n        });\n    }\n\n    handleChange (eventFacade, affix) {\n        const newState = {};\n\n        newState[affix] = !this.state[affix];\n\n        this.setState({\n            ...this.state,\n            ...newState\n        });\n    }\n\n    render() {\n        return (\n            <Container>\n                <Row className=\"generator-form\">\n                    <Col>\n                        <h3>Generate An Item</h3>\n                        <Form>\n                            <FormGroup>\n                                <label htmlFor=\"select-item-type\">Select Item Type (<em>or not; I can pick for you!</em>)</label>\n                                <FormSelect\n                                    size=\"lg\"\n                                    id=\"select-item-type\"\n                                    name=\"select-item-type\"\n                                    value={this.state.itemType}\n                                    onChange={eventFacade => {\n                                        this.changeItemType(eventFacade.target.value);\n                                    }}>\n                                    <option value=\"random\">Random</option>\n                                    <option value=\"amulet\">Amulet</option>\n                                    <option value=\"armor\">Armor</option>\n                                    <option value=\"ring\">Ring</option>\n                                    <option value=\"shield\">Shield</option>\n                                    <option value=\"weapon\">Weapon</option>\n                                </FormSelect>\n                            </FormGroup>\n                            <Container>\n                                <Row>\n                                    <Col sm=\"12\" lg=\"4\">\n                                        <FormGroup>\n                                            <FormCheckbox\n                                                toggle\n                                                checked={this.state.randomAffixes}\n                                                onChange={eventFacade => this.handleChange(eventFacade, 'randomAffixes')}>\n                                                Generate Random Affixes?\n                                            </FormCheckbox>\n                                        </FormGroup>\n                                    </Col>\n                                    <Col sm=\"12\" lg=\"8\">\n                                        <Collapse open={!this.state.randomAffixes}>\n                                            <FormGroup>\n                                                <label htmlFor=\"affixes\">Select Affixes:</label>\n                                                <FormRadio\n                                                    inline\n                                                    name=\"affixes\"\n                                                    checked={this.state.hasPrefix && !this.state.hasSuffix}\n                                                    onChange={() => {\n                                                        this.enableAffix('hasPrefix');\n                                                        this.disableAffix('hasSuffix');\n                                                    }}>\n                                                    Prefix\n                                                </FormRadio>\n                                                <FormRadio\n                                                    inline\n                                                    name=\"affixes\"\n                                                    checked={this.state.hasSuffix && !this.state.hasPrefix}\n                                                    onChange={() => {\n                                                        this.enableAffix('hasSuffix');\n                                                        this.disableAffix('hasPrefix');\n                                                    }}>\n                                                    Suffix\n                                                </FormRadio>\n                                                <FormRadio\n                                                    inline\n                                                    name=\"affixes\"\n                                                    checked={this.state.hasPrefix && this.state.hasSuffix}\n                                                    onChange={() => {\n                                                        this.enableAffix('hasPrefix');\n                                                        this.enableAffix('hasSuffix');\n                                                    }}>\n                                                    Both\n                                                </FormRadio>\n                                            </FormGroup>\n                                        </Collapse>\n                                    </Col>\n                                </Row>\n                            </Container>\n                            <ButtonToolbar className=\"generate-buttons\">\n                                <ButtonGroup size=\"lg\">\n                                    <Button onClick={eventFacade => {\n                                        eventFacade.preventDefault();\n                                        this.createLoot();\n                                    }}>Generate Loot!</Button>\n                                    <Button theme=\"secondary\" onClick={eventFacade => {\n                                        eventFacade.preventDefault();\n                                        this.resetForm();\n                                    }}>Reset</Button>\n                                </ButtonGroup>\n                            </ButtonToolbar>\n                        </Form>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <h3>Your New Magic Item:</h3>\n                        <LootCard item={this.state.item} />\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n\n    resetForm () {\n        const itemState = {\n            // We don't want to lose the existing loaded item on a reset!\n            item: this.state.item\n        };\n\n        Event('LOOT', 'Generator form reset', 'LOOT_CHEST');\n        this.setState(state => {\n            return {\n                ...this.baseState,\n                ...itemState\n            };\n        });\n    }\n};\n","import React from 'react';\nimport {\n    faDice\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n    FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\nimport {\n    Container\n} from 'shards-react';\n\nexport default class Jumbotron extends React.Component {\n    render () {\n        return (\n            <section className=\"jumbotron text-center\">\n                <Container>\n                    <h1 className=\"jumbotron-heading\">\n                        <FontAwesomeIcon icon={faDice} />&nbsp;\n                        Loot Chest\n                    </h1>\n                    <p className=\"lead text-muted\">Procedurally generated magic items for Green Ronin's Fantasy AGE, inspired by Blizzard's Diablo.</p>\n                </Container>\n            </section>\n        );\n    }\n}\n","import React from 'react';\n\nimport {\n    faGithub,\n    faTwitter\n} from '@fortawesome/free-brands-svg-icons';\nimport {\n    faBlog\n} from '@fortawesome/free-solid-svg-icons';\n\nimport {\n    FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\nimport {\n    Col,\n    Collapse,\n    Container,\n    Row\n} from 'shards-react';\n\nexport default class About extends React.Component {\n    render () {\n        return (\n            <Collapse className=\"bg-dark\" id=\"navbarHeader\" open={this.props.open}>\n                <Container>\n                    <Row>\n                        <Col sm=\"12\" lg=\"9\" py=\"4\">\n                            <h5 className=\"text-white\">About</h5>\n                            <p className=\"text-muted\">This is a magic item generator by Duane Sibilly for <a href=\"https://www.drivethrurpg.com/product/153066/Fantasy-AGE-Basic-Rulebook?affiliate_id=231748\">Fantasy AGE</a> based on <a href=\"https://scottsgameroom.com/2019/06/19/age-of-terror-magic-item-generator/\">Scott Boehmer's Age of Terror</a>.</p>\n                        </Col>\n                        <Col sm=\"12\" lg=\"3\" py=\"4\">\n                            <h5 className=\"text-white\">Duane Sibilly</h5>\n                            <ul className=\"list-unstyled\">\n                                <li><a href=\"https://twitter.com/valthonis\" className=\"text-white\"><FontAwesomeIcon icon={faTwitter} />&nbsp;Twitter</a></li>\n                                <li><a href=\"https://github.com/dsibilly/loot-chest\" className=\"text-white\"><FontAwesomeIcon icon={faGithub} />&nbsp;GitHub</a></li>\n                                <li><a href=\"https://valthonis.net\" className=\"text-white\"><FontAwesomeIcon icon={faBlog} />&nbsp;Blog</a></li>\n                            </ul>\n                        </Col>\n                    </Row>\n                </Container>\n            </Collapse>\n        );\n    }\n}\n","import React from 'react';\nimport {\n    faDice\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n    FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\nimport {\n    Nav,\n    Navbar,\n    NavbarBrand,\n    NavItem,\n    NavLink\n} from 'shards-react';\nimport About from './About';\n\nexport default class LootChestNavbar extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.toggleAbout = this.toggleAbout.bind(this);\n\n        this.state = {\n            aboutOpen: false\n        };\n    }\n\n    render () {\n        return (\n            <div>\n            <About open={this.state.aboutOpen} />\n            <Navbar type=\"dark\" theme=\"dark\" expand=\"md\">\n                <NavbarBrand href=\"#\">\n                    <FontAwesomeIcon icon={faDice} />&nbsp;\n                    Loot Chest\n                </NavbarBrand>\n                <Nav navbar>\n                    <NavItem>\n                        <NavLink href=\"#\" onClick={this.toggleAbout}>\n                            About\n                        </NavLink>\n                    </NavItem>\n                </Nav>\n            </Navbar>\n            </div>\n        );\n    }\n\n    toggleAbout () {\n        this.setState({\n            ...this.state,\n            ...{\n                aboutOpen: !this.state.aboutOpen\n            }\n        });\n    }\n};\n","import configuration from './Configuration';\nimport React from 'react';\n\nimport {\n    Container\n} from 'shards-react';\n\nimport Footer from './Footer';\nimport Form from './Form';\nimport Jumbotron from './Jumbotron';\nimport Navbar from './Navbar';\nimport {\n    pageView,\n    initializeGA\n} from './Tracking';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'shards-ui/dist/css/shards.min.css';\nimport './App.css';\n\nexport default class App extends React.Component {\n    componentDidMount () {\n        initializeGA(configuration.googleAnalyticsCode);\n        pageView();\n    }\n\n    render () {\n        return (\n          <Container>\n              <Navbar />\n              <Jumbotron />\n              <Form />\n              <Footer />\n          </Container>\n        );\n    }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = {\n    apiUrl: 'https://lootchest.valthonis.net',\n    googleAnalyticsCode: 'UA-43560836-3'\n};\n"],"sourceRoot":""}