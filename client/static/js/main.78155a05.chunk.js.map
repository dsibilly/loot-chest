{"version":3,"sources":["Configuration.js","Footer.js","LootCard.js","LootService.js","Form.js","Jumbotron.js","About.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","apiUrl","Footer","react_default","a","createElement","className","shards_react_es","href","React","Component","LootCard","props","str","affixList","item","affixes","map","affix","key","id","name","description","itemType","charAt","toUpperCase","slice","LootService","Object","classCallCheck","this","baseUrl","_configuration","fetch","concat","then","response","json","options","console","log","hasPrefix","hasSuffix","randomAffixes","lootUrl","method","headers","Content-Type","body","JSON","stringify","GeneratorForm","_this","possibleConstructorReturn","getPrototypeOf","call","disableAffix","bind","assertThisInitialized","enableAffix","handleChange","lootService","resetForm","state","baseState","newState","setState","objectSpread","_this2","getLoot","stateUpdate","catch","error","_this3","createLoot","eventFacade","_this4","src_LootCard","htmlFor","size","value","onChange","changeItemType","target","sm","lg","toggle","checked","open","inline","onClick","preventDefault","theme","_this5","itemState","Jumbotron","react_fontawesome_index_es","icon","faDice","About","py","LootChestNavbar","toggleAbout","aboutOpen","About_About","type","expand","navbar","App","Navbar_LootChestNavbar","Jumbotron_Jumbotron","Form_GeneratorForm","Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.78155a05.chunk.js","sourcesContent":["module.exports = {\n    apiUrl: 'https://lootchest.valthonis.net'\n};\n","import React from 'react';\n\nimport {\n    Container\n} from 'shards-react';\n\nexport default class Footer extends React.Component {\n    render () {\n        return (\n            <footer className=\"text-muted\">\n                <Container>\n                    <p className=\"float-right\">\n                        <a href=\"#top\">Back to top</a>\n                    </p>\n                    <p>Loot Chest &copy;2019 <a href=\"https://valthonis.net\">Duane Sibilly, II</a>. Front-end built with <a href=\"https://reactjs.org\">React</a> and <a href=\"https://designrevision.com/downloads/shards-react/\">Shards</a>.<br />\n                    <a href=\"https://scottsgameroom.com/tag/age-of-terror/\">Age of Terror</a> content used with kind permission from <a href=\"https://twitter.com/scottboehmer\">Scott Boehmer</a>.</p>\n                </Container>\n            </footer>\n        );\n    }\n};\n","import React from 'react';\nimport {\n    Card,\n    CardBody,\n    CardHeader,\n    CardSubtitle\n} from 'shards-react';\n\nconst capitalize = str => {\n                if (typeof str !== 'string') {\n                    return '';\n                }\n\n                return str.charAt(0).toUpperCase() + str.slice(1);\n            },\n    LootCard = (props) => {\n        const affixes = props.item.affixes,\n            affixList = affixes.map(affix => {\n                return <li key={affix.id}><strong>{affix.name}:</strong> {affix.description}</li>;\n            });\n\n        return (\n            <Card>\n                <CardHeader>{props.item.name}</CardHeader>\n                <CardBody>\n                    <CardSubtitle>Magic {capitalize(props.item.itemType)}</CardSubtitle>\n                    <ul>{affixList}</ul>\n                </CardBody>\n            </Card>\n        );\n    };\n\nexport default LootCard;\n","import _configuration from './Configuration';\n\nexport default class LootService {\n    constructor () {\n        this.baseUrl = _configuration.apiUrl;\n        this.item = {\n            affixes: [],\n            itemType: 'Item',\n            name: 'Placeholder Item'\n        };\n    }\n\n    async getLoot () {\n        this.item = await fetch(`${this.baseUrl}/loot`).then(response => response.json());\n\n        return this.item;\n    }\n\n    async createLoot (options) {\n        // TODO: Parse options and POST to API\n        console.log('LootService.createLoot():');\n        console.log(options);\n\n        const {\n            hasPrefix,\n            hasSuffix,\n            itemType,\n            randomAffixes\n        } = options;\n\n        let lootUrl,\n            method;\n\n        if (randomAffixes) {\n            // Generate wholly random item of the given type!\n            switch (itemType) {\n                case 'amulet':\n                case 'armor':\n                case 'ring':\n                case 'shield':\n                case 'weapon':\n                    lootUrl = `${this.baseUrl}/loot/${itemType}`;\n                    method = 'GET';\n                    break;\n                default:\n                    lootUrl = `${this.baseUrl}/loot`;\n                    method = 'GET';\n            }\n\n            this.item = await fetch(lootUrl, {\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                method\n            }).then(response => response.json());\n        } else {\n            // Generate item to specifications\n            this.item = await fetch(`${this.baseUrl}/loot/${itemType}`, {\n                body: JSON.stringify({\n                    hasPrefix,\n                    hasSuffix\n                }),\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                method: 'POST'\n            }).then(response => response.json());\n        }\n\n        console.log(this.item);\n        return this.item;\n    }\n};\n","import React from 'react';\n\nimport {\n    Button,\n    ButtonGroup,\n    ButtonToolbar,\n    Col,\n    Collapse,\n    Container,\n    Form,\n    FormCheckbox,\n    FormGroup,\n    FormRadio,\n    FormSelect,\n    Row\n} from 'shards-react';\n\n\nimport LootCard from './LootCard';\nimport LootService from './LootService';\n\nexport default class GeneratorForm extends React.Component {\n    changeItemType (itemType) {\n        const newState = {\n            itemType\n        };\n\n        this.setState(state => {\n            return {\n                ...state,\n                ...newState\n            };\n        });\n    }\n\n    componentDidMount() {\n        this.lootService.getLoot().then(item => {\n            const stateUpdate = {\n                item\n            };\n\n            this.setState(state => {\n                return {\n                    ...state,\n                    ...stateUpdate\n                };\n            });\n        }).catch(console.error);\n    }\n\n    constructor (props) {\n        super(props);\n\n        this.disableAffix = this.disableAffix.bind(this);\n        this.enableAffix = this.enableAffix.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.lootService = new LootService();\n        this.resetForm = this.resetForm.bind(this);\n\n        this.state = {\n            hasPrefix: true,\n            hasSuffix: false,\n            item: {\n                affixes: [],\n                itemType: 'Item',\n                name: 'Placeholder Item'\n            },\n            itemType: 'random',\n            randomAffixes: true\n        };\n\n        this.baseState = this.state;\n    }\n\n    createLoot () {\n        this.lootService.createLoot({\n            hasPrefix: this.state.hasPrefix,\n            hasSuffix: this.state.hasSuffix,\n            itemType: this.state.itemType,\n            randomAffixes: this.state.randomAffixes\n        }).then(item => {\n            const stateUpdate = {\n                item\n            };\n\n            this.setState(state => {\n                return {\n                    ...state,\n                    ...stateUpdate\n                };\n            });\n        }).catch(console.error);\n    }\n\n    disableAffix (affix) {\n        const newState = {};\n\n        newState[affix] = false;\n\n        this.setState(state => {\n            return {\n                ...state,\n                ...newState\n            };\n        });\n    }\n\n    enableAffix (affix) {\n        const newState = {};\n\n        newState[affix] = true;\n\n        this.setState(state => {\n            return {\n                ...state,\n                ...newState\n            };\n        });\n    }\n\n    handleChange (eventFacade, affix) {\n        const newState = {};\n\n        newState[affix] = !this.state[affix];\n\n        this.setState({\n            ...this.state,\n            ...newState\n        });\n    }\n\n    render() {\n        return (\n            <Container>\n                <Row>\n                    <Col>\n                        <h3>You've found a magic item!</h3>\n                        <LootCard item={this.state.item} />\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <h3>Generate Another Item?</h3>\n                        <Form>\n                            <FormGroup>\n                                <label htmlFor=\"select-item-type\">Item Type</label>\n                                <FormSelect\n                                    size=\"lg\"\n                                    id=\"select-item-type\"\n                                    name=\"select-item-type\"\n                                    value={this.state.itemType}\n                                    onChange={eventFacade => {\n                                        this.changeItemType(eventFacade.target.value);\n                                    }}>\n                                    <option value=\"random\">Random</option>\n                                    <option value=\"amulet\">Amulet</option>\n                                    <option value=\"armor\">Armor</option>\n                                    <option value=\"ring\">Ring</option>\n                                    <option value=\"shield\">Shield</option>\n                                    <option value=\"weapon\">Weapon</option>\n                                </FormSelect>\n                            </FormGroup>\n                            <Container>\n                                <Row>\n                                    <Col sm=\"12\" lg=\"4\">\n                                        <FormGroup>\n                                            <FormCheckbox\n                                                toggle\n                                                checked={this.state.randomAffixes}\n                                                onChange={eventFacade => this.handleChange(eventFacade, 'randomAffixes')}>\n                                                Generate Random Affixes?\n                                            </FormCheckbox>\n                                        </FormGroup>\n                                    </Col>\n                                    <Col sm=\"12\" lg=\"8\">\n                                        <Collapse open={!this.state.randomAffixes}>\n                                            <FormGroup>\n                                                <label htmlFor=\"affixes\">Select Affixes:</label>\n                                                <FormRadio\n                                                    inline\n                                                    name=\"affixes\"\n                                                    checked={this.state.hasPrefix && !this.state.hasSuffix}\n                                                    onChange={() => {\n                                                        this.enableAffix('hasPrefix');\n                                                        this.disableAffix('hasSuffix');\n                                                    }}>\n                                                    Prefix\n                                                </FormRadio>\n                                                <FormRadio\n                                                    inline\n                                                    name=\"affixes\"\n                                                    checked={this.state.hasSuffix && !this.state.hasPrefix}\n                                                    onChange={() => {\n                                                        this.enableAffix('hasSuffix');\n                                                        this.disableAffix('hasPrefix');\n                                                    }}>\n                                                    Suffix\n                                                </FormRadio>\n                                                <FormRadio\n                                                    inline\n                                                    name=\"affixes\"\n                                                    checked={this.state.hasPrefix && this.state.hasSuffix}\n                                                    onChange={() => {\n                                                        this.enableAffix('hasPrefix');\n                                                        this.enableAffix('hasSuffix');\n                                                    }}>\n                                                    Both\n                                                </FormRadio>\n                                            </FormGroup>\n                                        </Collapse>\n                                    </Col>\n                                </Row>\n                            </Container>\n                            <ButtonToolbar className=\"generate-buttons\">\n                                <ButtonGroup size=\"lg\">\n                                    <Button onClick={eventFacade => {\n                                        eventFacade.preventDefault();\n                                        this.createLoot();\n                                    }}>Generate Loot!</Button>\n                                    <Button theme=\"secondary\" onClick={eventFacade => {\n                                        eventFacade.preventDefault();\n                                        this.resetForm();\n                                    }}>Reset</Button>\n                                </ButtonGroup>\n                            </ButtonToolbar>\n                        </Form>\n                    </Col>\n                </Row>\n            </Container>\n        );\n    }\n\n    resetForm () {\n        const itemState = {\n            // We don't want to lose the existing loaded item on a reset!\n            item: this.state.item\n        };\n\n        this.setState(state => {\n            return {\n                ...this.baseState,\n                ...itemState\n            };\n        });\n    }\n};\n","import React from 'react';\nimport {\n    faDice\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n    FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\nimport {\n    Container\n} from 'shards-react';\n\nexport default class Jumbotron extends React.Component {\n    render () {\n        return (\n            <section className=\"jumbotron text-center\">\n                <Container>\n                    <h1 className=\"jumbotron-heading\">\n                        <FontAwesomeIcon icon={faDice} />&nbsp;\n                        Loot Chest\n                    </h1>\n                    <p className=\"lead text-muted\">Procedurally generated magic items for Green Ronin's Fantasy AGE, inspired by Blizzard's Diablo.</p>\n                </Container>\n            </section>\n        );\n    }\n}\n","import React from 'react';\n\nimport {\n    Col,\n    Collapse,\n    Container,\n    Row\n} from 'shards-react';\n\nexport default class About extends React.Component {\n    render () {\n        return (\n            <Collapse className=\"bg-dark\" id=\"navbarHeader\" open={this.props.open}>\n                <Container className=\"border rounded\">\n                    <Row>\n                        <Col sm=\"8\" py=\"4\">\n                            <h4 className=\"text-white\">About</h4>\n                            <p className=\"text-muted\">This is a magic item generator for Fantasy AGE based on <a href=\"https://scottsgameroom.com/2019/06/19/age-of-terror-magic-item-generator/\">Scott Boehmer's Age of Terror</a>. It was built by Duane Sibilly using Node.js, React, and the Shards UI framework.</p>\n                        </Col>\n                        <Col sm=\"4\" py=\"4\">\n                            <h4 className=\"text-white\">Contact</h4>\n                            <ul className=\"list-unstyled\">\n                                <li><a href=\"https://twitter.com/valthonis\" className=\"text-white\">Follow on Twitter</a></li>\n                            </ul>\n                        </Col>\n                    </Row>\n                </Container>\n            </Collapse>\n        );\n    }\n}\n","import React from 'react';\nimport {\n    faDice\n} from '@fortawesome/free-solid-svg-icons';\nimport {\n    FontAwesomeIcon\n} from '@fortawesome/react-fontawesome';\nimport {\n    Nav,\n    Navbar,\n    NavbarBrand,\n    NavItem,\n    NavLink\n} from 'shards-react';\nimport About from './About';\n\nexport default class LootChestNavbar extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.toggleAbout = this.toggleAbout.bind(this);\n\n        this.state = {\n            aboutOpen: false\n        };\n    }\n\n    render () {\n        return (\n            <div>\n            <About open={this.state.aboutOpen} />\n            <Navbar type=\"dark\" theme=\"dark\" expand=\"md\">\n                <NavbarBrand href=\"#\">\n                    <FontAwesomeIcon icon={faDice} />&nbsp;\n                    Loot Chest\n                </NavbarBrand>\n                <Nav navbar>\n                    <NavItem>\n                        <NavLink href=\"#\" onClick={this.toggleAbout}>\n                            About\n                        </NavLink>\n                    </NavItem>\n                </Nav>\n            </Navbar>\n            </div>\n        );\n    }\n\n    toggleAbout () {\n        this.setState({\n            ...this.state,\n            ...{\n                aboutOpen: !this.state.aboutOpen\n            }\n        });\n    }\n};\n","import React from 'react';\n\nimport {\n    Container\n} from 'shards-react';\n\nimport Footer from './Footer';\nimport Form from './Form';\nimport Jumbotron from './Jumbotron';\nimport Navbar from './Navbar';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'shards-ui/dist/css/shards.min.css';\nimport './App.css';\n\nexport default class App extends React.Component {\n    render () {\n        return (\n          <Container>\n              <Navbar />\n              <Jumbotron />\n              <Form />\n              <Footer />\n          </Container>\n        );\n    }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
